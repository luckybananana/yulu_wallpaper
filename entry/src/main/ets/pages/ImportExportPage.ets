import { router } from '@kit.ArkUI';
import { promptAction } from '@kit.ArkUI';
import { picker } from '@kit.CoreFileKit';
import { QuoteDataManager, Quote, AddQuoteParams } from '../common/QuoteDataManager';
import { fileIo } from '@kit.CoreFileKit';

/**
 * ÂØºÂÖ•Êï∞ÊçÆÊé•Âè£
 */
interface ImportData {
  quotes?: Quote[];
}

// Ê∑ªÂä†ËØ≠ÂΩïÊï∞ÊçÆÊé•Âè£ - ‰∏éQuoteDataManager‰øùÊåÅ‰∏ÄËá¥


// ÂØπËØùÊ°ÜÊåâÈíÆÊé•Âè£
interface DialogButton {
  text: string;
  color: string;
}

// ToastÈÄâÈ°πÊé•Âè£
interface ShowToastOptions {
  message: string;
  duration?: number;
}



/**
 * ÂØºÂá∫Êï∞ÊçÆÊé•Âè£
 */
interface ExportData {
  version: string;
  exportTime: string;
  totalCount: number;
  quotes: Quote[];
}

/**
 * ÂØºÂÖ•ÂØºÂá∫È°µÈù¢
 * Âü∫‰∫éimport-export.htmlÂÆûÁé∞Êï∞ÊçÆÁÆ°ÁêÜÂäüËÉΩ
 * ÊîØÊåÅËØ≠ÂΩïÊï∞ÊçÆÁöÑÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÂ§á‰ªΩÂíåÊÅ¢Â§ç
 */
@Entry
@Component
struct ImportExportPage {
  // È°µÈù¢Áä∂ÊÄÅ
  @State isLoading: boolean = false;
  @State selectedFile: string = '';
  @State importPreview: Quote[] = [];
  @State showPreview: boolean = false;
  
  // ÊúçÂä°ÂÆû‰æã
  private quoteManager = QuoteDataManager.getInstance(getContext(this));

  /**
   * È°µÈù¢ÂàùÂßãÂåñ
   */
  async aboutToAppear() {
    // È°µÈù¢ÂàùÂßãÂåñÂÆåÊàê
  }

  /**
   * ÂØºÂá∫Êï∞ÊçÆÂà∞JSONÊñá‰ª∂
   */
  async exportData() {
    this.isLoading = true;
    try {
      const quotes = await this.quoteManager.getAllQuotes();
      
      if (quotes.length === 0) {
        const noDataToast: ShowToastOptions = {
          message: 'ÊöÇÊó†Êï∞ÊçÆÂèØÂØºÂá∫',
          duration: 2000
        };
        promptAction.showToast(noDataToast);
        return;
      }

      const exportData: ExportData = {
        version: '1.0',
        exportTime: new Date().toISOString(),
        totalCount: quotes.length,
        quotes: quotes
      };
      
      const jsonString = JSON.stringify(exportData, null, 2);
      const fileName = `ËØ≠ÂΩïÂ§á‰ªΩ_${new Date().toISOString().split('T')[0]}.json`;
      
      // TODO: ÂÆûÁé∞Êñá‰ª∂‰øùÂ≠òÂäüËÉΩ
      // ËøôÈáåÈúÄË¶Å‰ΩøÁî®HarmonyOSÁöÑÊñá‰ª∂‰øùÂ≠òAPI
      
      const exportSuccessToast: ShowToastOptions = {
        message: `ÊàêÂäüÂØºÂá∫${quotes.length}Êù°ËØ≠ÂΩï`,
        duration: 2000
      };
      promptAction.showToast(exportSuccessToast);
    } catch (error) {
      console.error('ÂØºÂá∫Êï∞ÊçÆÂ§±Ë¥•:', error);
      const exportErrorToast: ShowToastOptions = {
        message: 'ÂØºÂá∫Â§±Ë¥•ÔºåËØ∑ÈáçËØï',
        duration: 2000
      };
      promptAction.showToast(exportErrorToast);
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * ÈÄâÊã©ÂØºÂÖ•Êñá‰ª∂
   */
  async selectImportFile() {
    try {
      const documentSelectOptions = new picker.DocumentSelectOptions();
      documentSelectOptions.maxSelectNumber = 1;
      documentSelectOptions.fileSuffixFilters = ['.json', '.txt'];
      
      const documentViewPicker = new picker.DocumentViewPicker();
      const result = await documentViewPicker.select(documentSelectOptions);
      
      if (result && result.length > 0) {
        this.selectedFile = result[0];
        await this.previewImportData();
      }
    } catch (error) {
      console.error('ÈÄâÊã©Êñá‰ª∂Â§±Ë¥•:', error);
      const selectFileErrorToast: ShowToastOptions = {
         message: 'ÈÄâÊã©Êñá‰ª∂Â§±Ë¥•'
       };
      selectFileErrorToast.duration = 2000;
      promptAction.showToast(selectFileErrorToast);
    }
  }

  /**
   * È¢ÑËßàÂØºÂÖ•Êï∞ÊçÆ
   */
  async previewImportData() {
    if (!this.selectedFile) return;

    this.isLoading = true;
    try {
      const file = fileIo.openSync(this.selectedFile, fileIo.OpenMode.READ_ONLY);
      const buffer = new ArrayBuffer(1024 * 1024); // 1MB buffer
      const readLen = fileIo.readSync(file.fd, buffer);
      fileIo.closeSync(file.fd);
      
      const uint8Array = new Uint8Array(buffer, 0, readLen);
      let content = '';
      for (let i = 0; i < uint8Array.length; i++) {
        content += String.fromCharCode(uint8Array[i]);
      }
      const importData: ImportData = JSON.parse(content);
      
      if (importData.quotes && Array.isArray(importData.quotes)) {
        this.importPreview = importData.quotes.slice(0, 10); // È¢ÑËßàÂâç10Êù°
        this.showPreview = true;
      } else {
        throw new Error('Êñá‰ª∂Ê†ºÂºè‰∏çÊ≠£Á°Æ');
      }
    } catch (error) {
      console.error('È¢ÑËßàÂØºÂÖ•Êï∞ÊçÆÂ§±Ë¥•:', error);
      const previewErrorToast: ShowToastOptions = {
          message: 'Êñá‰ª∂Ê†ºÂºèÈîôËØØÔºåËØ∑ÈÄâÊã©ÊúâÊïàÁöÑJSONÊñá‰ª∂'
        };
      previewErrorToast.duration = 2000;
      promptAction.showToast(previewErrorToast);
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * Á°ÆËÆ§ÂØºÂÖ•Êï∞ÊçÆ
   */
  async confirmImport() {
    if (!this.selectedFile) return;

    this.isLoading = true;
    try {
      const file = fileIo.openSync(this.selectedFile, fileIo.OpenMode.READ_ONLY);
      const buffer = new ArrayBuffer(1024 * 1024);
      const readLen = fileIo.readSync(file.fd, buffer);
      fileIo.closeSync(file.fd);
      
      const uint8Array2 = new Uint8Array(buffer, 0, readLen);
      let content2 = '';
      for (let i = 0; i < uint8Array2.length; i++) {
        content2 += String.fromCharCode(uint8Array2[i]);
      }
      const importData2: ImportData = JSON.parse(content2);
      
      if (importData2.quotes && Array.isArray(importData2.quotes)) {
        let importCount = 0;
        for (const quote of importData2.quotes) {
          if (quote.text && quote.text.trim()) {
            const addQuoteData: AddQuoteParams = {
              text: quote.text,
              tags: quote.tags || []
            };
            await this.quoteManager.addQuote(addQuoteData);
            importCount++;
          }
        }
        
        this.showPreview = false;
        this.selectedFile = '';
        
        const successToast: ShowToastOptions = {
          message: `ÊàêÂäüÂØºÂÖ•${importCount}Êù°ËØ≠ÂΩï`
        };
        promptAction.showToast(successToast);
      }
    } catch (error) {
      console.error('ÂØºÂÖ•Êï∞ÊçÆÂ§±Ë¥•:', error);
      const errorToast: ShowToastOptions = {} as ShowToastOptions;
      errorToast.message = 'ÂØºÂÖ•Â§±Ë¥•';
      errorToast.duration = 2000;
      promptAction.showToast(errorToast);
    } finally {
      this.isLoading = false;
    }
  }



  /**
   * ËøîÂõû‰∏ä‰∏ÄÈ°µ
   */
  goBack() {
    router.back();
  }

  /**
   * ÊûÑÂª∫È°µÈù¢UI
   */
  build() {
    Column() {
      // È°∂ÈÉ®ÂØºËà™Ê†è
      Row() {
        Button() {
          Text('‚Üê')
            .fontSize(20)
            .fontColor('#333333')
        }
        .backgroundColor(Color.Transparent)
        .onClick(() => this.goBack())
        
        Text('Êï∞ÊçÆÁÆ°ÁêÜ')
          .fontSize(18)
          .fontWeight(FontWeight.Medium)
          .fontColor('#333333')
          .layoutWeight(1)
          .textAlign(TextAlign.Center)
        
        Button() {
          Text('Â∏ÆÂä©')
            .fontSize(16)
            .fontColor('#007AFF')
        }
        .backgroundColor(Color.Transparent)
        .onClick(() => {
          promptAction.showDialog({
            title: '‰ΩøÁî®ËØ¥Êòé',
            message: '‚Ä¢ ÂØºÂá∫ÔºöÂ∞ÜÂΩìÂâçÊâÄÊúâËØ≠ÂΩï‰øùÂ≠ò‰∏∫JSONÊñá‰ª∂\n‚Ä¢ ÂØºÂÖ•Ôºö‰ªéJSONÊñá‰ª∂‰∏≠ÂØºÂÖ•ËØ≠ÂΩïÊï∞ÊçÆ\n\nÊ≥®ÊÑèÔºöÂØºÂÖ•‰ºöËøΩÂä†Êï∞ÊçÆÔºå‰∏ç‰ºöË¶ÜÁõñÁé∞ÊúâÊï∞ÊçÆ',
            buttons: [{
              text: 'Áü•ÈÅì‰∫Ü',
              color: '#007AFF'
            }]
          });
        })
      }
      .width('100%')
      .height(56)
      .padding({ left: 16, right: 16 })
      .backgroundColor('#FFFFFF')
      .border({ width: { bottom: 1 }, color: '#E5E5E5' })

      Scroll() {
        Column() {

          // ÂØºÂá∫ÂäüËÉΩÂç°Áâá
          Column() {
            Row() {
              Column() {
                Text('ÂØºÂá∫Êï∞ÊçÆ')
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .fontColor('#333333')
                
                Text('Â∞ÜÊâÄÊúâËØ≠ÂΩïÂØºÂá∫‰∏∫JSONÊñá‰ª∂')
                  .fontSize(14)
                  .fontColor('#666666')
                  .margin({ top: 4 })
              }
              .alignItems(HorizontalAlign.Start)
              .layoutWeight(1)
              
              Text('üì§')
                .fontSize(24)
            }
            .width('100%')
            .margin({ bottom: 16 })

            Button('ÂØºÂá∫Êï∞ÊçÆ')
              .width('100%')
              .height(44)
              .fontSize(16)
              .fontColor('#FFFFFF')
              .backgroundColor('#007AFF')
              .borderRadius(8)
              .enabled(!this.isLoading)
              .onClick(() => this.exportData())
          }
          .width('100%')
          .padding(20)
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .margin({ bottom: 16 })

          // ÂØºÂÖ•ÂäüËÉΩÂç°Áâá
          Column() {
            Row() {
              Column() {
                Text('ÂØºÂÖ•Êï∞ÊçÆ')
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .fontColor('#333333')
                
                Text('‰ªéJSONÊñá‰ª∂ÂØºÂÖ•ËØ≠ÂΩïÊï∞ÊçÆ')
                  .fontSize(14)
                  .fontColor('#666666')
                  .margin({ top: 4 })
              }
              .alignItems(HorizontalAlign.Start)
              .layoutWeight(1)
              
              Text('üì•')
                .fontSize(24)
            }
            .width('100%')
            .margin({ bottom: 16 })

            if (this.selectedFile) {
              Column() {
                Text('Â∑≤ÈÄâÊã©Êñá‰ª∂')
                  .fontSize(12)
                  .fontColor('#666666')
                  .alignSelf(ItemAlign.Start)
                
                Text(this.selectedFile.split('/').pop() || '')
                  .fontSize(14)
                  .fontColor('#333333')
                  .margin({ top: 4 })
                  .maxLines(1)
                  .textOverflow({ overflow: TextOverflow.Ellipsis })
              }
              .width('100%')
              .padding(12)
              .backgroundColor('#F8F9FA')
              .borderRadius(8)
              .margin({ bottom: 12 })
            }

            Row() {
              Button('ÈÄâÊã©Êñá‰ª∂')
                .layoutWeight(1)
                .height(44)
                .fontSize(16)
                .fontColor('#007AFF')
                .backgroundColor('#F0F8FF')
                .borderRadius(8)
                .enabled(!this.isLoading)
                .onClick(() => this.selectImportFile())
              
              if (this.selectedFile) {
                Button('ÂºÄÂßãÂØºÂÖ•')
                  .layoutWeight(1)
                  .height(44)
                  .fontSize(16)
                  .fontColor('#FFFFFF')
                  .backgroundColor('#34C759')
                  .borderRadius(8)
                  .margin({ left: 12 })
                  .enabled(!this.isLoading)
                  .onClick(() => this.confirmImport())
              }
            }
            .width('100%')
          }
          .width('100%')
          .padding(20)
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .margin({ bottom: 16 })

          // ÂØºÂÖ•È¢ÑËßà
          if (this.showPreview && this.importPreview.length > 0) {
            Column() {
              Row() {
                Text('ÂØºÂÖ•È¢ÑËßà')
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .fontColor('#333333')
                
                Blank()
                
                Text(`${this.importPreview.length}Êù°`)
                  .fontSize(14)
                  .fontColor('#666666')
              }
              .width('100%')
              .margin({ bottom: 12 })

              ForEach(this.importPreview.slice(0, 3), (quote: Quote, index: number) => {
                Column() {
                  Text(quote.text || '')
                    .fontSize(14)
                    .fontColor('#333333')
                    .maxLines(2)
                    .textOverflow({ overflow: TextOverflow.Ellipsis })
                  

                }
                .width('100%')
                .padding(12)
                .backgroundColor('#F8F9FA')
                .borderRadius(8)
                .margin({ bottom: 8 })
              })

              if (this.importPreview.length > 3) {
                Text(`ËøòÊúâ${this.importPreview.length - 3}Êù°ËØ≠ÂΩï...`)
                  .fontSize(12)
                  .fontColor('#666666')
                  .margin({ top: 8 })
              }
            }
            .width('100%')
            .padding(20)
            .backgroundColor('#FFFFFF')
            .borderRadius(12)
            .margin({ bottom: 16 })
          }


        }
        .padding(16)
      }
      .layoutWeight(1)
      .backgroundColor('#F5F5F5')

      // Âä†ËΩΩÁä∂ÊÄÅ
      if (this.isLoading) {
        Row() {
          LoadingProgress()
            .width(20)
            .height(20)
            .color('#007AFF')
          
          Text('Â§ÑÁêÜ‰∏≠...')
            .fontSize(14)
            .fontColor('#666666')
            .margin({ left: 8 })
        }
        .width('100%')
        .height(50)
        .justifyContent(FlexAlign.Center)
        .backgroundColor('rgba(255, 255, 255, 0.9)')
      }
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F5F5F5')
  }
}